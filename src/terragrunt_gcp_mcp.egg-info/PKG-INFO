Metadata-Version: 2.4
Name: terragrunt-gcp-mcp
Version: 0.1.0
Summary: MCP server tool for managing GCP infrastructure with Terragrunt
Home-page: https://github.com/your-org/terragrunt-gcp-tool-mcp
Author: Infrastructure Team
Author-email: Infrastructure Team <infra@example.com>
License: GPL-3.0
Project-URL: Homepage, https://github.com/organization/terragrunt-gcp-tool-mcp
Project-URL: Repository, https://github.com/organization/terragrunt-gcp-tool-mcp
Project-URL: Documentation, https://github.com/organization/terragrunt-gcp-tool-mcp/docs
Project-URL: Bug Tracker, https://github.com/organization/terragrunt-gcp-tool-mcp/issues
Keywords: mcp,terragrunt,terraform,gcp,infrastructure,iac
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: GNU General Public License v3 (GPLv3)
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: System :: Systems Administration
Classifier: Topic :: Internet :: WWW/HTTP :: HTTP Servers
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE.md
Requires-Dist: mcp>=0.4.0
Requires-Dist: fastmcp>=0.2.0
Requires-Dist: google-cloud-core>=2.4.1
Requires-Dist: google-cloud-storage>=2.10.0
Requires-Dist: google-cloud-compute>=1.15.0
Requires-Dist: google-cloud-resource-manager>=1.10.4
Requires-Dist: google-cloud-billing>=1.12.2
Requires-Dist: google-cloud-monitoring>=2.16.0
Requires-Dist: google-cloud-logging>=3.8.0
Requires-Dist: google-auth>=2.23.4
Requires-Dist: pyyaml>=6.0.1
Requires-Dist: requests>=2.31.0
Requires-Dist: click>=8.1.7
Requires-Dist: rich>=13.7.0
Requires-Dist: python-dateutil>=2.8.2
Requires-Dist: jinja2>=3.1.2
Requires-Dist: gitpython>=3.1.40
Requires-Dist: psutil>=5.9.6
Requires-Dist: pydantic>=2.0.0
Provides-Extra: dev
Requires-Dist: pytest>=7.4.3; extra == "dev"
Requires-Dist: pytest-asyncio>=0.21.1; extra == "dev"
Requires-Dist: pytest-cov>=4.1.0; extra == "dev"
Requires-Dist: black>=23.11.0; extra == "dev"
Requires-Dist: isort>=5.12.0; extra == "dev"
Requires-Dist: flake8>=6.1.0; extra == "dev"
Requires-Dist: mypy>=1.7.1; extra == "dev"
Requires-Dist: pre-commit>=3.5.0; extra == "dev"
Dynamic: author
Dynamic: home-page
Dynamic: license-file
Dynamic: requires-python

# Terragrunt GCP MCP Tool

A Model Context Protocol (MCP) server tool for managing Google Cloud Platform infrastructure using Terragrunt. This tool provides intelligent automation and management capabilities for the terragrunt-gcp-org-automation codebase.

## Features

### Resource Management
- **Add New Resources**: Create new infrastructure resources with templates
- **Query Resources**: Inspect existing resource configurations and states
- **Update Resources**: Modify resource configurations safely
- **Delete Resources**: Remove resources with dependency checking

### Deployment Operations
- **Check Status**: Monitor deployment status and health
- **Trigger Deployments**: Initiate infrastructure deployments
- **Plan Changes**: Generate and review infrastructure plans
- **Rollback**: Revert failed or unwanted changes

### Monitoring & Notifications
- **Status Monitoring**: Track infrastructure state and changes
- **Team Notifications**: Send updates to Slack channels
- **Alert Management**: Configure and manage infrastructure alerts
- **Audit Logging**: Track all operations and changes

### Advanced Features
- **Dependency Analysis**: Understand resource dependencies
- **Environment Management**: Handle dev/staging/production environments
- **Template Management**: Create and manage infrastructure templates
- **Cost Analysis**: Monitor and optimize infrastructure costs

## Installation

```bash
# Clone the repository
git clone <repository-url>
cd terragrunt-gcp-tool-mcp

# Install dependencies
pip install -r requirements.txt

# Or install in development mode
pip install -e .

# Configure the MCP server
cp config/config.example.yaml config/config.yaml
# Edit config.yaml with your settings
```

## Configuration

Create a `config/config.yaml` file with your settings:

```yaml
# GCP Configuration
gcp:
  project_id: "your-project-id"
  credentials_path: "/path/to/credentials.json"
  default_region: "europe-west2"

# Terragrunt Configuration
terragrunt:
  root_path: "/path/to/terragrunt-gcp-org-automation"
  binary_path: "terragrunt"
  terraform_binary: "tofu"

# Slack Configuration (optional)
slack:
  webhook_url: "https://hooks.slack.com/..."
  default_channel: "#infrastructure"

# Monitoring Configuration
monitoring:
  enabled: true
  check_interval: 300  # seconds
```

## Usage

### Running as MCP Server

There are several ways to start the MCP server:

#### Option 1: Using the startup script (Recommended)
```bash
# Start the MCP server with default config
python3 run_server.py

# Start with custom config file
python3 run_server.py config/config.yaml
```

#### Option 2: Using the module directly
```bash
# Start the MCP server
python3 -m terragrunt_gcp_mcp.server

# With custom config
python3 -m terragrunt_gcp_mcp.server config/config.yaml
```

#### Option 3: Using the CLI
```bash
# Initialize configuration first
python3 -m terragrunt_gcp_mcp.cli init

# Start the server
python3 -m terragrunt_gcp_mcp.cli server

# Other CLI commands
python3 -m terragrunt_gcp_mcp.cli list-resources
python3 -m terragrunt_gcp_mcp.cli status
```

The server will be available for MCP clients to connect via stdio.

### Using with Claude Desktop

Add to your Claude Desktop MCP configuration:

```json
{
  "mcpServers": {
    "terragrunt-gcp": {
      "command": "python3",
      "args": ["-m", "terragrunt_gcp_mcp.server"],
      "cwd": "/path/to/terragrunt-gcp-tool-mcp"
    }
  }
}
```

### Available Tools

The MCP server provides these tools:

#### Resource Management
- `list_resources` - List all resources in the infrastructure
- `get_resource` - Get detailed information about a specific resource
- `create_resource` - Create a new infrastructure resource
- `update_resource` - Update an existing resource configuration
- `delete_resource` - Delete a resource (with dependency checking)

#### Deployment Operations
- `plan_deployment` - Generate deployment plan for changes
- `deploy_resources` - Deploy infrastructure changes
- `check_deployment_status` - Check status of ongoing deployments
- `rollback_deployment` - Rollback a failed deployment

#### Monitoring & Analysis
- `get_infrastructure_status` - Get overall infrastructure health
- `analyze_dependencies` - Analyze resource dependencies
- `get_cost_analysis` - Get infrastructure cost breakdown
- `check_drift` - Detect configuration drift

#### Team Collaboration
- `send_slack_notification` - Send notifications to team
- `create_deployment_summary` - Generate deployment reports
- `get_audit_log` - Retrieve audit logs

## Examples

### Creating a New Compute Instance

```python
# Example: Create a new compute instance
result = create_resource(
    resource_type="compute",
    resource_name="web-server-02",
    environment="dev-99",
    region="europe-west2",
    configuration={
        "machine_type": "e2-medium",
        "disk_size_gb": 50,
        "tags": ["web-server", "api"]
    }
)
```

### Deploying Changes

```python
# Example: Deploy specific resources
result = deploy_resources(
    resources=["live/dev-account/test-dev/dev-99/europe-west2/compute/web-server-02"],
    dry_run=False,
    notify_slack=True
)
```

### Monitoring Status

```python
# Example: Check infrastructure status
status = get_infrastructure_status(
    environment="dev-99",
    include_costs=True,
    include_health=True
)
```

## Architecture

```
┌─────────────────┐    ┌──────────────────┐    ┌─────────────────┐
│   MCP Client    │    │   MCP Server     │    │   Terragrunt    │
│   (Claude)      │◄──►│   (This Tool)    │◄──►│   Infrastructure│
└─────────────────┘    └──────────────────┘    └─────────────────┘
                                │
                                ▼
                       ┌──────────────────┐
                       │   External APIs  │
                       │   • GCP APIs     │
                       │   • Slack API    │
                       │   • GitHub API   │
                       └──────────────────┘
```

## Security

- **Credential Management**: Supports multiple GCP authentication methods
- **Permission Validation**: Checks permissions before operations
- **Audit Logging**: All operations are logged for security auditing
- **Safe Operations**: Dry-run mode for testing changes

## Contributing

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Add tests for new functionality
5. Submit a pull request

## License

GNU General Public License v3.0 - see LICENSE.md for details.

## Support

For issues and questions:
- Create an issue in the repository
- Check the documentation in `/docs`
- Review the examples in `/examples`
